# https://leetcode.com/problems/non-overlapping-intervals/


class Solution:
    def eraseOverlapIntervals(self, intervals: list[list[int]]) -> int:
        intervals.sort()

        swaps = 0
        cur_end = intervals[0][1]
        for s, e in intervals[1:]:
            if s >= cur_end:
                cur_end = e
            else:
                swaps += 1
                cur_end = min(cur_end, e)

        return swaps


# Tests
solver = Solution()
assert solver.eraseOverlapIntervals([[1, 2], [2, 3], [3, 4], [1, 3]]) == 1
assert solver.eraseOverlapIntervals([[1, 3], [1, 2], [2, 3], [3, 4]]) == 1
assert solver.eraseOverlapIntervals([[1, 2], [1, 3], [2, 4], [3, 4]]) == 2
assert solver.eraseOverlapIntervals([[1, 2], [1, 2], [1, 2]]) == 2
assert solver.eraseOverlapIntervals([[1, 2], [2, 3]]) == 0
assert (
    solver.eraseOverlapIntervals(
        [
            [-52, 31],
            [-73, -26],
            [82, 97],
            [-65, -11],
            [-62, -49],
            [95, 99],
            [58, 95],
            [-31, 49],
            [66, 98],
            [-63, 2],
            [30, 47],
            [-40, -26],
        ]
    )
    == 7
)
assert (
    solver.eraseOverlapIntervals(
        [
            [-12898, 18812],
            [25187, 34794],
            [-49562, 43854],
            [-42403, -40134],
            [-19080, -17177],
            [47520, 49175],
            [-31069, 40988],
            [47868, 48717],
            [19315, 46720],
            [-35430, -17753],
            [-2483, 2307],
            [36189, 49625],
            [-47813, -46634],
            [20724, 27689],
            [-25994, -12897],
            [-5214, 26679],
            [9125, 16181],
            [12814, 19900],
            [38900, 45389],
            [18312, 22317],
            [11063, 33205],
            [45267, 46394],
            [21837, 30643],
            [46466, 47568],
            [-15142, 949],
            [3550, 10056],
            [-7377, 7543],
            [27689, 28716],
            [-1981, 44367],
            [7270, 27213],
            [24920, 27490],
            [-24494, 22828],
            [3134, 6958],
            [20732, 33241],
            [35310, 46574],
            [-24624, 15570],
            [12442, 40223],
            [-1779, 11309],
            [-11656, 32540],
            [20731, 31327],
            [-1969, 10009],
            [41953, 49624],
            [-1964, 25321],
            [-41861, 47759],
            [39501, 41755],
            [46353, 49282],
            [3075, 47746],
            [-33829, 26197],
            [11001, 36184],
            [41552, 45440],
            [-33805, 17239],
            [39422, 43822],
            [46405, 48818],
            [-6011, 1381],
            [1638, 45404],
            [10836, 27743],
            [9701, 45374],
            [33744, 40872],
            [-44413, 13272],
            [17979, 46633],
            [25690, 33785],
            [-9917, 43417],
            [-34402, -14134],
            [3308, 4013],
            [36130, 38175],
            [15342, 30472],
            [-10403, -9354],
            [-1351, 1021],
            [27529, 47581],
            [45594, 45676],
            [10830, 39602],
            [44020, 48617],
            [40969, 48889],
            [11251, 44986],
            [-27959, 10579],
        ]
    )
    == 60
)
